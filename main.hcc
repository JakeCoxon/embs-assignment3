#include "vlab.hch"

extern clk_port;
set clock = internal CLK;

#define STATE_HEAD 1
#define STATE_DATA 2

#define SAMPLE_WIDTH8  1
#define SAMPLE_WIDTH16 2

#define SAMPLE_RATE8  1
#define SAMPLE_RATE11 2
#define SAMPLE_RATE22 3
#define SAMPLE_RATE44 4
    
#define BUFFER_MAX_SIZE  4095
#define BUFFER_MAX_INDEX 4094

mpram {
  rom <unsigned 16>  readport[BUFFER_MAX_SIZE];
  wom <unsigned 16> writeport[BUFFER_MAX_SIZE];
} buffer with {block=1};

chan <unsigned 16> buffer_read_result;
chan <unsigned 14> buffer_write;
chan <unsigned 1> buffer_read_flag, buffer_clear_flag;

unsigned 12 buffer_start;
unsigned 16 last_sample;
unsigned 12 channel_sizes[4];
unsigned 3  mix_count;

#define FOREACH_CHANNEL FOR_CHANNEL(0) FOR_CHANNEL(1) FOR_CHANNEL(2) FOR_CHANNEL(3)


inline unsigned 32 wait_for_fsl_data() {
  unsigned int 32 fsldatain;
  
  while (!FSL_FROM_MB_EXISTS) delay;
    
  FSL_FROM_MB_READ = 1;
  par { fsldatain = FSL_FROM_MB_DATA;
        FSL_FROM_MB_READ = 0; }
        
  return fsldatain;
}


void read_data_from_fsl() {
  unsigned int 32 fsldatain;
  unsigned int 31 sample_length;
  unsigned int 16 sample_temp;
  unsigned int 8 read_state, sample_width, sample_rate;
  unsigned int 4 scale1, scale2, i;
  unsigned int 2 mix_number;
  unsigned int 1 initialise;
  
  
  read_state = STATE_HEAD;
  
  while (1) {

    // sample rate  sample width  mix  mix id  num count  unused
    // 11111111     11111111      1    11      111        1111111111
    fsldatain = wait_for_fsl_data();
    
    par { sample_rate   = fsldatain[31:24];
          sample_width  = fsldatain[23:16];
          mix_number    = fsldatain[14:13];
          mix_count     = fsldatain[12:10]; }
          
    // init   length/4 of packet data
    // 1      11111111111111111111111111111
    fsldatain = wait_for_fsl_data();
          
    par { initialise    = fsldatain[31];
          sample_length = fsldatain[30:0]; }
          
    // If switches have been changed then the initialise flag is
    // set and so we need to clear the current buffer.
    if (initialise) {
      buffer_clear_flag ! 1;
    }    

    while (sample_length > 0) {

      fsldatain = wait_for_fsl_data();
      
      // Samples need to be scaled if they aren't 44k
      // 8k samples alternate between 5x and 6x to get close enough
      scale1 = (sample_rate == SAMPLE_RATE8)  ? 5 :
               (sample_rate == SAMPLE_RATE11) ? 4 :
               (sample_rate == SAMPLE_RATE22) ? 2 :
               (sample_rate == SAMPLE_RATE44) ? 1 : 1;
      
      scale2 = (sample_rate == SAMPLE_RATE8)  ? 6 : scale1;
      
      #define REP(reps, data) \
        for(i = 0; i < (reps); i++) { buffer_write ! mix_number @ data; }
      
      if (sample_width == SAMPLE_WIDTH8) {
        
        // 4 sample in every int
        
        REP(scale1, fsldatain[31:24] @ 0);
        REP(scale2, fsldatain[23:16] @ 0);
        REP(scale1, fsldatain[15:8]  @ 0);
        REP(scale2, fsldatain[7:0]   @ 0);
        
      }
      else if (sample_width == SAMPLE_WIDTH16) {
        
        // 2 sample in an int but samples are signed
        
        sample_temp = ~ fsldatain[31:16] + 1;
        REP(scale1, sample_temp[15:4]);
          
        sample_temp = ~ fsldatain[15:0] + 1;
        REP(scale2, sample_temp[15:4]);
        
      }

      #undef REP
      
      sample_length --;

    }


  }
}
void send_data_to_dac() {
  unsigned int 16 receive;
  unsigned int 16 time;
  
  while (1) {
    buffer_read_flag ! 1;              // 
    buffer_read_result ? receive;      // ~7 clock cyles
    
    if      (mix_count >= 3) receive = receive >> 2;
    else if (mix_count >= 2) receive = receive >> 1;
      
    dac_write_to_output(0xF, receive[11:0]); // ~131 clock cycles
            
    // Delay 50,000,000 / rate - above cycles
    for (time = 0; time < 999; time++); 
  }
  
}

void manage_buffer_read() {
  // Read data from the buffer, send through buffer_read. 
  // Assume buffer is not empty (size > 0)
  
  
  unsigned 16 value;
  unsigned int  1 all_empty;
  
  all_empty = 1;
  #define FOR_CHANNEL(x) all_empty &= (channel_sizes[0] == 0);
    FOREACH_CHANNEL
  #undef FOR_CHANNEL

  if (all_empty) {
    buffer_read_result ! last_sample;
    return;
  }
  
  value = buffer.readport[buffer_start];
 
  buffer.writeport[buffer_start] = 0;
  
  par { 
    buffer_read_result ! value;
    last_sample = value;
    buffer_start ++; // Overflow should wrap
    
    #define FOR_CHANNEL(x) \
      if (channel_sizes[x] != 0) channel_sizes[x] --;
      FOREACH_CHANNEL
    #undef FOR_CHANNEL
    
  }
  
}


void manage_buffer_write(unsigned int 14 mix_data) {
  // Write data to the buffer, assume buffer is not full
  
  unsigned 2 mix_number;
  unsigned 12 write_id;
  unsigned 16 data;
  
  mix_number = mix_data[13:12];
  if (channel_sizes[mix_number] == BUFFER_MAX_INDEX)
    return;
  
  write_id = buffer_start + channel_sizes[mix_number];
  data = buffer.readport[write_id];
  data = data + (0 @ mix_data[11:0]);
  
  par { buffer.writeport[write_id] = data;
        channel_sizes[mix_number] ++; }
        
}

void manage_buffer_clear() {
  unsigned 12 i;
  
  par { 
    buffer_start = 0;
  
    // Reset all channel sizes to zero
    #define FOR_CHANNEL(x) channel_sizes[x] = 0;
      FOREACH_CHANNEL
    #undef FOR_CHANNEL

    for(i = 0; i <= BUFFER_MAX_INDEX; i++) {
      buffer.writeport[i] = 0;
    }
  }
  
}

void manage_buffer() {
  unsigned int 14 receive;
  unsigned int  1 receive_1;
  unsigned int  1 all_empty;
  
  while(1) {
    
    prialt {
      case buffer_clear_flag ? receive_1:
        manage_buffer_clear();
        break;
    
      case buffer_write ? receive:
        manage_buffer_write(receive);
        break;
      
      case buffer_read_flag ? receive_1:
        manage_buffer_read();
        break;
    }
    
  }
}

void main(void) {
  initialise();
  
  last_sample = 0;
  manage_buffer_clear();
  
  par {
    uart_driver();

    send_data_to_dac();
    read_data_from_fsl();
    manage_buffer();
  }
}
