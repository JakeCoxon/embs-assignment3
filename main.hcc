#include "vlab.hch"

extern clk_port;
set clock = internal CLK;

unsigned 12 buffer_start;
unsigned 12 buffer_size;

#define STATE_HEAD 1
#define STATE_DATA 2

#define SAMPLE_WIDTH8  1
#define SAMPLE_WIDTH16 2

#define SAMPLE_RATE8  1
#define SAMPLE_RATE11 2
#define SAMPLE_RATE22 3
#define SAMPLE_RATE44 4
    
#define BUFFER_MAX_SIZE  4095
#define BUFFER_MAX_INDEX 4094

mpram {
  rom <unsigned 12> readport[BUFFER_MAX_SIZE];
  wom <unsigned 12> writeport[BUFFER_MAX_SIZE];
} buffer with {block=1};

chan <unsigned 12> buffer_read_result, buffer_write;
chan <unsigned 1> buffer_read_flag, buffer_clear_flag;


inline unsigned 32 wait_for_fsl_data() {
  unsigned int 32 fsldatain;
  
  while (!FSL_FROM_MB_EXISTS) delay;
    
  FSL_FROM_MB_READ = 1;
  par { fsldatain = FSL_FROM_MB_DATA;
        FSL_FROM_MB_READ = 0; }
        
  return fsldatain;
}


void read_data_from_fsl() {
  unsigned int 32 fsldatain;
  unsigned int 16 sample_length, sample_temp;
  unsigned int 8 read_state, sample_width, sample_rate, 
                 sample_scale1, sample_scale2, i;
  unsigned int 1 initialise;
  
  
  read_state = STATE_HEAD;
  
  while (1) {

    // 11111111     11111111      11111111  11111111
    // sample rate  sample width  reserved  reserved
    fsldatain = wait_for_fsl_data();
    
    par { sample_rate   = fsldatain[31:24];
          sample_width  = fsldatain[23:16]; }
          
    // 1      11111111111111111111111111111
    // init   length/4 of packet data
    fsldatain = wait_for_fsl_data();
          
    par { initialise    = fsldatain[31:31];
          sample_length = fsldatain[15:0]; }
          
    if (initialise) {
      buffer_clear_flag ! 1; 
    }
    

    while (sample_length > 0) {

      fsldatain = wait_for_fsl_data();
      
      sample_scale1 = (sample_rate == SAMPLE_RATE8)  ? 5 :
                      (sample_rate == SAMPLE_RATE11) ? 4 :
                      (sample_rate == SAMPLE_RATE22) ? 2 :
                      (sample_rate == SAMPLE_RATE44) ? 1 : 1;
      
      sample_scale2 = (sample_rate == SAMPLE_RATE8) ? 6 : sample_scale1;

      #define REP1(x)  for(i = 0; i < sample_scale1; i++) { x }
      #define REP2(x)  for(i = 0; i < sample_scale2; i++) { x }
      
      if (sample_width == SAMPLE_WIDTH8) {
        REP1( buffer_write ! fsldatain[31:24] @ 0; )
        REP2( buffer_write ! fsldatain[23:16] @ 0; )
        REP1( buffer_write ! fsldatain[15:8]  @ 0; )
        REP2( buffer_write ! fsldatain[7:0]   @ 0; )
      }
      else if (sample_width == SAMPLE_WIDTH16) {
        sample_temp = ~ fsldatain[31:16] + 1;
        REP1( buffer_write ! sample_temp[15:4]; )
          
        sample_temp = ~ fsldatain[15:0] + 1;
        REP2( buffer_write ! sample_temp[15:4]; )
      }
      
      #undef REP1
      #undef REP2
      
      sample_length --;

    }


  }
}
void send_data_to_dac() {
  unsigned int 12 receive;
  unsigned int 16 time;
  
  while (1) {
    buffer_read_flag ! 1;              // 
    buffer_read_result ? receive;      // ~7 clock cyles
    dac_write_to_output(0xF, receive); // ~131 clock cycles
            
    // Delay 50,000,000 / rate - above cycles
    for (time = 0; time < 995; time++); 
  }
}

// Read data from the buffer, send through buffer_read. 
// Assume buffer is not empty (size > 0)
inline void manage_buffer_read() {
  unsigned 12 value;
  value = buffer.readport[buffer_start];
  par { buffer_read_result ! value;
        buffer_start ++; // Overflow should wrap
        buffer_size  --; }
}


// Write data to the buffer, assume buffer is not full
inline void manage_buffer_write(unsigned int 12 data) {
  unsigned 12 buffer_write_id;
  buffer_write_id = buffer_start + buffer_size;
  par { buffer.writeport[buffer_write_id] = data;
        buffer_size ++; }
}

inline void manage_buffer_clear() {
  unsigned 12 i;
  par { buffer_start = 0;
        buffer_size = 0; }
  //for(i = 0; i <= BUFFER_MAX_INDEX; i++) {
  //  buffer.writeport[i] = 0;
  //}
}

void manage_buffer() {
  unsigned int 12 receive;
  unsigned int 1 receive_1;
  
  while(1) {
    
    #define PRIALT_CLEAR \
      case buffer_clear_flag ? receive_1: \
          manage_buffer_clear(); \
          break;
    #define PRIALT_WRITE \
        case buffer_write ? receive: \
          manage_buffer_write(receive); \
          break;
    #define PRIALT_NOWRITE \
        case buffer_write ? receive: \
          delay; \
          break;
    #define PRIALT_READ \
        case buffer_read_flag ? receive_1:\
          manage_buffer_read();\
          break;
    #define PRIALT_DEFAULT \
        default:\
          delay;\
          break;
    
    // Buffer is empty
    if (buffer_size == 0) {
      prialt { PRIALT_CLEAR; 
               PRIALT_WRITE; 
               PRIALT_DEFAULT; }
    }
    // Buffer is full
    else if (buffer_size == BUFFER_MAX_INDEX) {
      prialt { PRIALT_CLEAR; 
               PRIALT_READ; 
               PRIALT_NOWRITE; 
               PRIALT_DEFAULT; }
    }  
    // Buffer is neither empty or full
    else {
      prialt { PRIALT_CLEAR; 
               PRIALT_READ; 
               PRIALT_WRITE; 
               PRIALT_DEFAULT; }
    }
    
    #undef PRIALT_CLEAR
    #undef PRIALT_READ
    #undef PRIALT_WRITE
    #undef PRIALT_DEFAULT
  }
}

void main(void) {
  buffer_start = 0;
  buffer_size = 0;
  
  initialise();
  par {
    uart_driver();

    send_data_to_dac();
    read_data_from_fsl();
    manage_buffer();
  }
}
